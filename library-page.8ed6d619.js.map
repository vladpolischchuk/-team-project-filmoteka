{"mappings":"gfAAA,IAAMA,EAAmB,WACrB,IAAIC,EAAgB,KACpB,IACIA,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,kB,CAClD,MAAAC,GACE,M,CAEJ,OAAOL,C,EAGLM,EAAiB,WACnB,IAAIC,EAAc,KAClB,IACIA,EAAcN,KAAKC,MAAMC,aAAaC,QAAQ,gB,CAChD,MAAAC,GACE,M,CAEJ,OAAOE,C,EChBXC,EAAAC,EAAA,SAWMC,EAAuB,uEAEvBC,EAAUC,SAASC,cAAc,YACjCC,EAAaF,SAASC,cAAc,8BACpCE,EAAWH,SAASC,cAAc,2BAClCG,EAAUJ,SAASC,cAAc,YAEnCI,EAAgBlB,IAChBmB,EAAcZ,IAkBlB,SAASa,EAAcC,GACnBC,QAAQC,IAAIF,GACZ,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,GAAK,EACxCF,QAAQC,IAAIF,EAAOG,KACf,EAAAf,EAAAiB,mBAAkBL,EAAOG,IAAIG,MAAK,SAAAC,GAE9BhB,EAAQiB,mBAAmB,YAAaC,EAAuBF,G,IAtB3EN,QAAQC,IAAIL,GAGU,MAAjBA,GAAkD,IAAzBA,EAAcO,QACxB,MAAfN,GAA8C,IAAvBA,EAAYM,OAI7BP,EAAcO,OAAS,GAC9BV,EAAWgB,UAAUC,IAAI,aACzBZ,EAAcF,IACPC,EAAYM,OAAS,IAC5BT,EAASe,UAAUC,IAAI,aACvBZ,EAAcD,KAPdF,EAAQgB,UAAY,uDAA4EC,OAArBvB,GAC3EC,EAAQqB,UAAY,IAuDxB,SAASE,IACLvB,EAAQqB,UAAY,E,CAGxB,SAASH,EAAuBF,GAE9B,GADEN,QAAQC,IAAIK,GACQ,MAAjBV,GAAkD,IAAzBA,EAAcO,QAC5B,MAAfN,GAA8C,IAAvBA,EAAYM,OADpC,CAIE,IACIW,EAWER,EAXFQ,GACAC,EAUET,EAVFS,MAEAC,GAQEV,EATFW,SASEX,EARFU,aACAE,EAOEZ,EAPFY,aAUIC,GAHFb,EANFc,OAMEd,EALFe,eAKEf,EAJFgB,WAIEhB,EAHFiB,aAGEjB,EAFFkB,WAKkBlB,EAAKc,OAAOK,KAAI,SAAAC,G,OAAWA,EAAQC,I,IAAMC,KAAK,OAElE,MAAO,2EAGoBhB,OADcE,EAAG,uCACHF,OANrB,mCAM0CA,OAArBI,EAAY,WAC/BJ,OADwCG,EAAM,kCAG3CH,OAFHG,EAAM,qEAG2BH,OAD9BO,EAAY,qEAC+BP,OAAbM,EAAa,0CA1BtE,C,CAiCJzB,EAAWoC,iBAAiB,SA5EF,SAACC,GACvBpC,EAASe,UAAUsB,OAAO,aAC1BtC,EAAWgB,UAAUC,IAAI,aACzBG,IAIqB,OAFrBjB,EAAgBlB,MAEsC,IAAzBkB,EAAcO,QACvCR,EAAQgB,UAAY,6DAAkFC,OAArBvB,GACjFC,EAAQqB,UAAY,IACbf,EAAcO,OAAS,IAC9Bb,EAAQqB,UAAY,GACpBhB,EAAQgB,UAAY,GACpBb,EAAcF,G,IAgEtBF,EAASmC,iBAAiB,SA3DF,SAACC,GACrBpC,EAASe,UAAUC,IAAI,aACvBjB,EAAWgB,UAAUsB,OAAO,aAC5BlB,IAImB,OAFnBhB,EAAcZ,MAEoC,IAAvBY,EAAYM,QACnCR,EAAQgB,UAAY,2DAAgFC,OAArBvB,GAC/EC,EAAQqB,UAAY,IACbd,EAAYM,OAAS,IAC5Bb,EAAQqB,UAAY,GACpBhB,EAAQgB,UAAY,GACpBb,EAAcD,G","sources":["src/js/library/from-local-storage-info.js","src/js/library/my-library.js"],"sourcesContent":["const isMovieInWatched = () => {\n    let watchedMovies = null;\n    try {\n        watchedMovies = JSON.parse(localStorage.getItem('Watched movies'));\n    } catch {\n        return;\n    }\n    return watchedMovies;\n}\n\nconst isMovieInQueue = () => {\n    let queueMovies = null;\n    try {\n        queueMovies = JSON.parse(localStorage.getItem('Queue movies'));\n    } catch {\n        return;\n    }\n    return queueMovies;\n}\n\nexport { isMovieInWatched, isMovieInQueue };","\nimport {\n    fetchFilmsAPI,\n    fetchMoreFilmsAPI,\n    fetchMoreGenresAPI,\n    fetchGenresAPI,\n    fetchMovieInfoAPI,\n    fetchFilmsSearch,\n  } from '../film-api';\n\nimport { isMovieInWatched, isMovieInQueue } from './from-local-storage-info';\n\nconst IF_LIBRARY_EMPTY_IMG = '<image class=\"message-image\" src=\"https://i.imgur.com/Ud8xgso.gif\"/>';\n\nconst library = document.querySelector('.library');\nconst watchedBtn = document.querySelector('.button-container__watched');\nconst queueBtn = document.querySelector('.button-container__queu');\nconst message = document.querySelector('.message');\n\nlet watchedMovies = isMovieInWatched();\nlet queueMovies = isMovieInQueue();\n\nconsole.log(watchedMovies)\n\nif (\n    (watchedMovies == null || watchedMovies.length === 0) &&\n    (queueMovies == null || queueMovies.length === 0)\n) {\n    message.innerHTML = `<p class=\"message-text\">You library is empty yet</p>${IF_LIBRARY_EMPTY_IMG}`;\n    library.innerHTML = '';\n} else if (watchedMovies.length > 0) {\n    watchedBtn.classList.add('is-active');\n    renderLibrary(watchedMovies);\n} else if (queueMovies.length > 0) {\n    queueBtn.classList.add('is-active');\n    renderLibrary(queueMovies);\n}\n\nfunction renderLibrary(movies) {\n    console.log(movies)\n    for (let i = 0; i < movies.length; i += 1) {\n    console.log(movies[i])\n        fetchMovieInfoAPI(movies[i]).then(data => {\n           \n            library.insertAdjacentHTML('beforeend', createLibraryMovieItem(data));\n        })\n    }\n    }\n\nconst onWatchedBtnClick = (event) => {\n    queueBtn.classList.remove('is-active');\n    watchedBtn.classList.add('is-active');\n    clearLibrary();\n\n    watchedMovies = isMovieInWatched();\n\n    if (watchedMovies == null || watchedMovies.length === 0) {\n        message.innerHTML = `<p class=\"message-text\">Your watched list is empty yet</p>${IF_LIBRARY_EMPTY_IMG}`;\n        library.innerHTML = '';\n    } else if (watchedMovies.length > 0) {\n        library.innerHTML = '';\n        message.innerHTML = '';\n        renderLibrary(watchedMovies);\n    }\n};\n\n\nconst onQueueBtnClick = (event) => {\n    queueBtn.classList.add('is-active');\n    watchedBtn.classList.remove('is-active');\n    clearLibrary();\n\n    queueMovies = isMovieInQueue();\n\n    if (queueMovies == null || queueMovies.length === 0) {\n        message.innerHTML = `<p class=\"message-text\">Your queue list is empty yet</p>${IF_LIBRARY_EMPTY_IMG}`;\n        library.innerHTML = '';\n    } else if (queueMovies.length > 0) {\n        library.innerHTML = '';\n        message.innerHTML = '';\n        renderLibrary(queueMovies);\n    }\n};\n\nfunction clearLibrary() {\n    library.innerHTML = '';\n}\n\nfunction createLibraryMovieItem(data) {\n    console.log(data)\n  if ((watchedMovies == null || watchedMovies.length === 0) &&\n  (queueMovies == null || queueMovies.length === 0)) {\n    return;\n  } \n    const {\n        id,\n        title,\n        overview,\n        poster_path,\n        release_date,\n        genres,\n        original_title,\n        popularity,\n        vote_average,\n        vote_count,\n        \n      } = data;\n\n      const basicImgURL = 'https://image.tmdb.org/t/p/w500';\n      const genresMovie = data.genres.map(element => element.name).join(', ');\n\n      return `\n      <li class=\"card\">\n  <a href=\"\" class=\"card-link link\" data-id=\"${id}\">\n    <img class=\"card-img\" src=\"${basicImgURL}${poster_path}\" alt=\"${title}\">\n    <h3 class=\"card-name\">${title}</h3>\n    <div class=\"card-item\">\n      <p class=\"card-genres\">${genresMovie}</p>\n      <p class=\"card-year\"><span class=\"card-line\">|</span>${release_date}</p>\n    </div>\n  </a>\n</li>\n      `;\n    }\n\nwatchedBtn.addEventListener('click', onWatchedBtnClick);\nqueueBtn.addEventListener('click', onQueueBtnClick);\n\n\n\n// треба описати клас is-active для кнопок"],"names":["$4bf6fe09158a34cd$export$6f2705b68ffed592","watchedMovies","JSON","parse","localStorage","getItem","e","$4bf6fe09158a34cd$export$c87fd7cccbc83cb7","queueMovies","$9TUSr","parcelRequire","$40b8f30e28d51416$var$IF_LIBRARY_EMPTY_IMG","$40b8f30e28d51416$var$library","document","querySelector","$40b8f30e28d51416$var$watchedBtn","$40b8f30e28d51416$var$queueBtn","$40b8f30e28d51416$var$message","$40b8f30e28d51416$var$watchedMovies","$40b8f30e28d51416$var$queueMovies","$40b8f30e28d51416$var$renderLibrary","movies","console","log","i","length","fetchMovieInfoAPI","then","data","insertAdjacentHTML","$40b8f30e28d51416$var$createLibraryMovieItem","classList","add","innerHTML","concat","$40b8f30e28d51416$var$clearLibrary","id","title","poster_path","overview","release_date","genresMovie","genres","original_title","popularity","vote_average","vote_count","map","element","name","join","addEventListener","event","remove"],"version":3,"file":"library-page.8ed6d619.js.map"}