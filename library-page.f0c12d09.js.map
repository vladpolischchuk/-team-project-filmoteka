{"mappings":"oeAAA,MAAMA,EAAmB,KACrB,IAAIC,EAAgB,KACpB,IACIA,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,kB,CAClD,MACE,M,CAEJ,OAAOJ,CAAa,EAGlBK,EAAiB,KACnB,IAAIC,EAAc,KAClB,IACIA,EAAcL,KAAKC,MAAMC,aAAaC,QAAQ,gB,CAChD,MACE,M,CAEJ,OAAOE,CAAW,ECjBhBC,EAAaC,SAASC,cAAc,8BAE1C,SAASC,IACLH,EAAWI,UAAUC,IAAI,Y,CAO7B,SAASC,IACLC,SAASH,UAAUC,IAAI,Y,CCX3B,IAAAG,EAAAC,EAAA,SASA,MAEMC,EAAUT,SAASC,cAAc,YACjCS,EAAaV,SAASC,cAAc,8BACpCU,EAAWX,SAASC,cAAc,2BAClCW,EAAUZ,SAASC,cAAc,YAEvC,IAAIY,EAAgBtB,IAChBuB,EAAcjB,IAgBlB,SAASkB,EAAcC,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,GAAK,GACpC,EAAAV,EAAAY,mBAAkBC,aAAaC,MAAKC,IAChCb,EAAQc,mBAAmB,YAAaC,EAAuBF,GAAM,G,CAhB3D,MAAjBT,GAAkD,IAAzBA,EAAcK,QACxB,MAAfJ,GAA8C,IAAvBA,EAAYI,OAI7BL,EAAcK,OAAS,GAC9BhB,IACAa,EAAcF,IACPC,EAAYI,OAAS,IAC5Bb,IACAU,EAAcD,KAPdF,EAAQa,UAAY,0HACpBhB,EAAQgB,UAAY,IAiDxB,SAASC,IACLjB,EAAQgB,UAAY,E,CAGxB,SAASD,EAAuBF,EAAMK,GACpC,GAAoB,IAAhBL,EAAKJ,OAGT,OAAOI,EACJM,KAAI,EAAGC,GAAAC,EAAEC,MAAEA,EAAKC,YAAEA,EAAWC,aAAEA,EAAYC,UAAEA,MAC5C,IAAIC,EAAUF,EAAaG,MAAM,EAAG,GAChCC,EAAS,GACb,IAAK,IAAIC,KAAYJ,EAAW,CAC9B,IAAIK,EAAQZ,EAAaa,MAAK,EAACX,GAAEA,KAASA,IAAOS,IACjDD,EAAOI,KAAKF,EAAMG,K,CAEhBL,EAAOnB,QAAU,IACnBmB,EAAS,CAACA,EAAO,GAAIA,EAAO,GAAI,UAElC,IAAIM,EAAaN,EAAOO,KAAK,MAC7B,MAAO,mEACkCd,uCACde,cAAcb,WAAqBD,kCACxCA,qEAEGY,qEAC8BR,kCAGvD,IAEDS,KAAK,G,CAIVlC,EAAWoC,iBAAiB,SApEDC,IDzBvBzC,SAASH,UAAU6C,OAAO,aC2B1B9C,IACAwB,IAEAb,EAAgBtB,IAEK,MAAjBsB,GAAkD,IAAzBA,EAAcK,QACvCN,EAAQa,UAAY,gIACpBhB,EAAQgB,UAAY,IACbZ,EAAcK,OAAS,IAC9BT,EAAQgB,UAAY,GACpBV,EAAcF,G,IAyDtBF,EAASmC,iBAAiB,SApDDC,IACrB1C,IDnDAN,EAAWI,UAAU6C,OAAO,aCqD5BtB,IAEAZ,EAAcjB,IAEK,MAAfiB,GAA8C,IAAvBA,EAAYI,QACnCN,EAAQa,UAAY,8HACpBhB,EAAQgB,UAAY,IACbX,EAAYI,OAAS,IAC5BT,EAAQgB,UAAY,GACpBV,EAAcD,G","sources":["src/js/library/from-local-storage-info.js","src/js/library/library-buttons-activate.js","src/js/library/my-library.js"],"sourcesContent":["const isMovieInWatched = () => {\n    let watchedMovies = null;\n    try {\n        watchedMovies = JSON.parse(localStorage.getItem('Watched movies'));\n    } catch {\n        return;\n    }\n    return watchedMovies;\n}\n\nconst isMovieInQueue = () => {\n    let queueMovies = null;\n    try {\n        queueMovies = JSON.parse(localStorage.getItem('Queue movies'));\n    } catch {\n        return;\n    }\n    return queueMovies;\n}\n\nexport { isMovieInWatched, isMovieInQueue };","const watchedBtn = document.querySelector('.button-container__watched');\n\nfunction activateWatchedBtn() {\n    watchedBtn.classList.add('is-active')\n};\n\nfunction deactiveWatchedBtn() {\n    watchedBtn.classList.remove('is-active')\n};       \n\nfunction activateQueueBtn() {\n    queueBtn.classList.add('is-active')\n}\n\nfunction deactivateQueueBtn() {\n    queueBtn.classList.remove('is-active')\n}\n\nexport { activateWatchedBtn, activateQueueBtn, deactiveWatchedBtn, deactivateQueueBtn };","import { fetchMovieInfoAPI } from '../film-api';\nimport {\n    activateWatchedBtn,\n    activateQueueBtn,\n    deactiveWatchedBtn,\n    deactivateQueueBtn,\n} from './library-buttons-activate';\nimport { isMovieInWatched, isMovieInQueue } from './from-local-storage-info';\n\nconst IF_LIBRARY_EMPTY_IMG = 'image class=\"message-image\" src=\"https://i.imgur.com/Ud8xgso.gif\"/>';\n\nconst library = document.querySelector('.library');\nconst watchedBtn = document.querySelector('.button-container__watched');\nconst queueBtn = document.querySelector('.button-container__queu');\nconst message = document.querySelector('.message');\n\nlet watchedMovies = isMovieInWatched();\nlet queueMovies = isMovieInQueue();\n\nif (\n    (watchedMovies == null || watchedMovies.length === 0) &&\n    (queueMovies == null || queueMovies.length === 0)\n) {\n    message.innerHTML = `<p class=\"message-text\">You library is empty yet</p>${IF_LIBRARY_EMPTY_IMG}`;\n    library.innerHTML = '';\n} else if (watchedMovies.length > 0) {\n    activateWatchedBtn();\n    renderLibrary(watchedMovies);\n} else if (queueMovies.length > 0) {\n    activateQueueBtn();\n    renderLibrary(queueMovies);\n}\n\nfunction renderLibrary(movies) {\n    for (let i = 0; i < movies.length; i += 1)\n        fetchMovieInfoAPI(filmModalId).then(data => {\n            library.insertAdjacentHTML('beforeend', createLibraryMovieItem(data));\n        })\n    }\n\nconst onWatchedBtnClick = (event) => {\n    deactivateQueueBtn();\n    activateWatchedBtn();\n    clearLibrary();\n\n    watchedMovies = isMovieInWatched();\n\n    if (watchedMovies == null || watchedMovies.length === 0) {\n        message.innerHTML = `<p class=\"message-text\">Your watched list is empty yet</p>${IF_LIBRARY_EMPTY_IMG}`;\n        library.innerHTML = '';\n    } else if (watchedMovies.length > 0) {\n        library.innerHTML = '';\n        renderLibrary(watchedMovies);\n    }\n};\n\n\nconst onQueueBtnClick = (event) => {\n    activateQueueBtn();\n    deactiveWatchedBtn();\n    clearLibrary();\n\n    queueMovies = isMovieInQueue();\n\n    if (queueMovies == null || queueMovies.length === 0) {\n        message.innerHTML = `<p class=\"message-text\">Your queue list is empty yet</p>${IF_LIBRARY_EMPTY_IMG}`;\n        library.innerHTML = '';\n    } else if (queueMovies.length > 0) {\n        library.innerHTML = '';\n        renderLibrary(queueMovies);\n    }\n};\n\nfunction clearLibrary() {\n    library.innerHTML = '';\n}\n\nfunction createLibraryMovieItem(data, genres_names) {\n  if (data.length === 0) {\n    return;\n  }\n  return data\n    .map(({ id, title, poster_path, release_date, genre_ids }) => {\n      let release = release_date.slice(0, 4);\n      let genres = [];\n      for (let genre_id of genre_ids) {\n        let genre = genres_names.find(({ id }) => id === genre_id);\n        genres.push(genre.name);\n      }\n      if (genres.length >= 3) {\n        genres = [genres[0], genres[1], 'Other'];\n      }\n      let genres_str = genres.join(', ');\n      return `<li class=\"card\">\n  <a href=\"\" class=\"card-link link\" data-id=\"${id}\">\n    <img class=\"card-img\" src=\"${basicImgURL}${poster_path}\" alt=\"${title}\">\n    <h3 class=\"card-name\">${title}</h3>\n    <div class=\"card-item\">\n      <p class=\"card-genres\">${genres_str}</p>\n      <p class=\"card-year\"><span class=\"card-line\">|</span>${release}</p>\n    </div>\n  </a>\n</li>`;\n    })\n    .join('');\n}\n\n\nwatchedBtn.addEventListener('click', onWatchedBtnClick);\nqueueBtn.addEventListener('click', onQueueBtnClick);\n\n\n\n// треба описати клас is-active для кнопок"],"names":["$409ee4f54fb2d0b4$export$6f2705b68ffed592","watchedMovies","JSON","parse","localStorage","getItem","$409ee4f54fb2d0b4$export$c87fd7cccbc83cb7","queueMovies","$a86dab26bfd47bf4$var$watchedBtn","document","querySelector","$a86dab26bfd47bf4$export$cfde98e34fee1ead","classList","add","$a86dab26bfd47bf4$export$af8f632b06b38e33","queueBtn","$8sSZi","parcelRequire","$316d4e8a771c35e3$var$library","$316d4e8a771c35e3$var$watchedBtn","$316d4e8a771c35e3$var$queueBtn","$316d4e8a771c35e3$var$message","$316d4e8a771c35e3$var$watchedMovies","$316d4e8a771c35e3$var$queueMovies","$316d4e8a771c35e3$var$renderLibrary","movies","i","length","fetchMovieInfoAPI","filmModalId","then","data","insertAdjacentHTML","$316d4e8a771c35e3$var$createLibraryMovieItem","innerHTML","$316d4e8a771c35e3$var$clearLibrary","genres_names","map","id","id1","title","poster_path","release_date","genre_ids","release","slice","genres","genre_id","genre","find","push","name","genres_str","join","basicImgURL","addEventListener","event","remove"],"version":3,"file":"library-page.f0c12d09.js.map"}